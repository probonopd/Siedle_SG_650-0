From: Martin Jansa <Martin.Jansa@gmail.com>
Date: Thu, 29 Mar 2012 14:42:00 +0200
Subject: [PATCH] 2to3: dictionary fixes

Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
---
 arfile.py            |  2 +-
 opkg-compare-indexes | 10 +++++-----
 opkg-make-index      | 18 +++++++++---------
 opkg-show-deps       | 12 ++++++------
 opkg-update-index    |  2 +-
 opkg.py              |  8 ++++----
 6 files changed, 26 insertions(+), 26 deletions(-)

diff --git a/arfile.py b/arfile.py
index 320c9ca..9149387 100644
--- a/arfile.py
+++ b/arfile.py
@@ -50,7 +50,7 @@ class ArFile:
         self.directoryOffset = self.f.tell()
 
     def open(self, fname):
-        if self.directory.has_key(fname):
+        if fname in self.directory:
             return FileSection(self.f, self.directory[fname][-1], int(self.directory[fname][5]))
 
         if self.directoryRead:
diff --git a/opkg-compare-indexes b/opkg-compare-indexes
index e0933ce..0c119e3 100755
--- a/opkg-compare-indexes
+++ b/opkg-compare-indexes
@@ -18,8 +18,8 @@ pkgs1.read_packages_file(pkg_dir1 + '/Packages')
 pkgs2 = opkg.Packages()
 pkgs2.read_packages_file(pkg_dir2 + '/Packages')
 
-names1 = pkgs1.packages.keys()
-names2 = pkgs2.packages.keys()
+names1 = list(pkgs1.packages.keys())
+names2 = list(pkgs2.packages.keys())
 
 ## union of the two names lists
 pkgs = {}
@@ -28,14 +28,14 @@ for name in names1:
 for name in names2:
     pkgs[name] = pkgs2.packages[name]
 
-names = pkgs.keys()
+names = list(pkgs.keys())
 names.sort() 
 for name in names:
     pkg1 = None
     pkg2 = None
-    if pkgs1.packages.has_key(name):
+    if name in pkgs1.packages:
         pkg1 = pkgs1.packages[name]
-    if pkgs2.packages.has_key(name):
+    if name in pkgs2.packages:
         pkg2 = pkgs2.packages[name]
     if pkg1 and pkg2 and pkg1.version != pkg2.version:
         print("CHANGED: %s from version %s to %s (%s)" % (pkg1.package, pkg1.version, pkg2.version, pkg2.maintainer))
diff --git a/opkg-make-index b/opkg-make-index
index c3a292b..2fc8a69 100755
--- a/opkg-make-index
+++ b/opkg-make-index
@@ -79,7 +79,7 @@ if old_filename:
           sys.stderr.write("Reading package list from " + old_filename + "\n")
      old_packages = opkg.Packages()
      old_packages.read_packages_file(old_filename)
-     for k in old_packages.packages.keys():
+     for k in list(old_packages.packages.keys()):
           p = old_packages.packages[k]
           old_pkg_hash[p.filename] = p
      try:
@@ -100,8 +100,8 @@ for filename in files:
      basename = os.path.basename(filename)
      pkg = None
      fnameStat = os.stat(filename)
-     if old_pkg_hash.has_key(basename):
-          if pkgsStamps.has_key(basename) and int(fnameStat.st_mtime) == pkgsStamps[basename]:
+     if basename in old_pkg_hash:
+          if basename in pkgsStamps and int(fnameStat.st_mtime) == pkgsStamps[basename]:
             if (verbose):
                sys.stderr.write("Found %s in Packages\n" % (filename,))
             pkg = old_pkg_hash[basename]
@@ -113,7 +113,7 @@ for filename in files:
                sys.stderr.write("Reading info for package %s\n" % (filename,))
           pkg = opkg.Package(filename)
      pkg_key = ("%s:%s" % (pkg.package, pkg.architecture))
-     if (packages.packages.has_key(pkg_key)):
+     if (pkg_key in packages.packages):
           old_filename = packages.packages[pkg_key].filename
      else:
           old_filename = ""
@@ -139,7 +139,7 @@ for filename in files:
       continue
 
 pkgsStampsFile = open(stamplist_filename, "w")
-for f in pkgsStamps.keys():
+for f in list(pkgsStamps.keys()):
     pkgsStampsFile.write("%d %s\n" % (pkgsStamps[f], f))
 pkgsStampsFile.close()
 
@@ -152,7 +152,7 @@ if packages_filename:
      old_stdout = sys.stdout
      tmp_packages_filename = ("%s.%d" % (packages_filename, os.getpid()))
      sys.stdout = open(tmp_packages_filename, "w")
-names = packages.packages.keys()
+names = list(packages.packages.keys())
 names.sort()
 for name in names:
   try:
@@ -193,7 +193,7 @@ if packages_filename:
 if verbose:
      sys.stderr.write("Generate Packages.filelist file\n")
 files = {}
-names = packages.packages.keys()
+names = list(packages.packages.keys())
 names.sort()
 for name in names:
      try:
@@ -207,13 +207,13 @@ for name in names:
      for fn in fnlist:
           (h,t) = os.path.split(fn)
           if not t: continue
-          if not files.has_key(t): files[t] = name+':'+fn
+          if t not in files: files[t] = name+':'+fn
           else: files[t] = files[t] + ',' + name+':'+fn
 
 if filelist_filename:
      tmp_filelist_filename = ("%s.%d" % (filelist_filename, os.getpid()))
      sys.stdout = open(tmp_filelist_filename, "w")
-     names = files.keys()
+     names = list(files.keys())
      names.sort()
      for name in names:
           print((name,files[name]))
diff --git a/opkg-show-deps b/opkg-show-deps
index 524d247..3f5899d 100755
--- a/opkg-show-deps
+++ b/opkg-show-deps
@@ -40,21 +40,21 @@ def split_list(str):
                r.append(ii)
      return r
 
-for i in packages.packages.keys():
+for i in list(packages.packages.keys()):
      p = packages.packages[i]
-     if not provider_hash.has_key(p.package):
+     if p.package not in provider_hash:
           provider_hash[p.package] = []
      provider_hash[p.package].append(p)
      if p.provides:
           provides = string.split(p.provides, ",")
           for prov in provides:
                prov = string.strip(prov)
-               if not provider_hash.has_key(prov):
+               if prov not in provider_hash:
                     provider_hash[prov] = []
                provider_hash[prov].append(p)
 
 def find_package(name):
-     if provider_hash.has_key(name):
+     if name in provider_hash:
           return provider_hash[name]
      return None
 
@@ -68,7 +68,7 @@ def recurse(pkg):
                newpkgs = find_package(dep)
                if newpkgs:
                     for newpkg in newpkgs:
-	                 if required.has_key(newpkg.package):
+	                 if newpkg.package in required:
 			      return
                     recurse(newpkgs[0])
                else:
@@ -82,6 +82,6 @@ for root in remaining_args:
      for p in pkgs:
           recurse(p)
      
-for pkg in required.keys():
+for pkg in list(required.keys()):
      print(pkg)
 
diff --git a/opkg-update-index b/opkg-update-index
index d9c9b43..1b05875 100755
--- a/opkg-update-index
+++ b/opkg-update-index
@@ -15,7 +15,7 @@ packages = opkg.Packages()
 
 packages.read_packages_file(pkg_dir + '/Packages')
 
-names = packages.packages.keys()
+names = list(packages.packages.keys())
 
 packages.add_package(opkg.Package(pkg_filename))
 
diff --git a/opkg.py b/opkg.py
index 54060c3..75ad3d3 100644
--- a/opkg.py
+++ b/opkg.py
@@ -217,7 +217,7 @@ class Package:
                     self.size = int(value)
                 elif name == 'md5sum':
                     self.md5 = value
-                elif self.__dict__.has_key(name):
+                elif name in self.__dict__:
                     self.__dict__[name] = value
                 else:
                     print("Lost field %s, %s" % (name,value))
@@ -447,7 +447,7 @@ class Packages:
         package = pkg.package
         arch = pkg.architecture
         name = ("%s:%s" % (package, arch))
-        if (not self.packages.has_key(name)):
+        if (name not in self.packages):
             self.packages[name] = pkg
         
         if pkg.compare_version(self.packages[name]) >= 0:
@@ -470,14 +470,14 @@ class Packages:
 
     def write_packages_file(self, fn):
         f = open(fn, "w")
-        names = self.packages.keys()
+        names = list(self.packages.keys())
         names.sort()
         for name in names:
             f.write(self.packages[name].__repr__())
         return    
 
     def keys(self):
-        return self.packages.keys()
+        return list(self.packages.keys())
 
     def __getitem__(self, key):
         return self.packages[key]
