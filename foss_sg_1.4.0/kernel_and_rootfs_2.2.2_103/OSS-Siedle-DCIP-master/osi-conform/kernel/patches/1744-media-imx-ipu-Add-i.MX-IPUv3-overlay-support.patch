From: Sascha Hauer <s.hauer@pengutronix.de>
Date: Wed, 1 Jun 2011 14:10:58 +0200
Subject: [PATCH] [media] imx-ipu: Add i.MX IPUv3 overlay support

Remark about offset cropping:
ipu_cpmem_set_image internally adds the Y plane offset
(left + width * top) to the physical DMA address, so
we have to do the same when exchanging buffer addresses
with ipu_cpmem_set_buffer.

[synchronized with vout driver]
Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
---
 drivers/media/platform/imx/Kconfig       |    9 +
 drivers/media/platform/imx/Makefile      |    1 +
 drivers/media/platform/imx/imx-ipu-ovl.c | 1021 ++++++++++++++++++++++++++++++
 3 files changed, 1031 insertions(+)
 create mode 100644 drivers/media/platform/imx/imx-ipu-ovl.c

diff --git a/drivers/media/platform/imx/Kconfig b/drivers/media/platform/imx/Kconfig
index 98e079743430..dc9731158361 100644
--- a/drivers/media/platform/imx/Kconfig
+++ b/drivers/media/platform/imx/Kconfig
@@ -26,6 +26,15 @@ config VIDEO_IMX_IPU_CSI
 	---help---
 	  This is a v4l2 video capture driver for the IPUv3 on i.MX5/6.
 
+config VIDEO_IMX_IPU_OVL
+	tristate "i.MX5/6 IPUv3 based overlay driver"
+	depends on VIDEO_DEV && IMX_IPUV3_CORE
+	select V4L2_MEM2MEM_DEV
+	select VIDEOBUF2_DMA_CONTIG
+	select VIDEO_IMX_IPU_COMMON
+	---help---
+	  This is a v4l2 overlay video driver for the IPUv3 on i.MX5/6.
+
 config VIDEO_IMX_IPU_SCALER
 	tristate "i.MX5/6 IPUv3 based image scaler driver"
 	depends on VIDEO_DEV && IMX_IPUV3_CORE
diff --git a/drivers/media/platform/imx/Makefile b/drivers/media/platform/imx/Makefile
index d97267467559..20e0c042a11e 100644
--- a/drivers/media/platform/imx/Makefile
+++ b/drivers/media/platform/imx/Makefile
@@ -2,5 +2,6 @@ obj-$(CONFIG_MEDIA_IMX)			+= imx-media.o
 obj-$(CONFIG_MEDIA_IMX_VIDEO_SWITCH)	+= imx-video-switch.o
 obj-$(CONFIG_VIDEO_IMX_IPU_COMMON)	+= imx-ipu.o
 obj-$(CONFIG_VIDEO_IMX_IPU_CSI)		+= imx-ipuv3-csi.o
+obj-$(CONFIG_VIDEO_IMX_IPU_OVL)		+= imx-ipu-ovl.o
 obj-$(CONFIG_VIDEO_IMX_IPU_SCALER)	+= imx-ipu-scaler.o
 obj-$(CONFIG_VIDEO_IMX_IPU_VDIC)	+= imx-ipu-vdic.o
diff --git a/drivers/media/platform/imx/imx-ipu-ovl.c b/drivers/media/platform/imx/imx-ipu-ovl.c
new file mode 100644
index 000000000000..0438c7d9c112
--- /dev/null
+++ b/drivers/media/platform/imx/imx-ipu-ovl.c
@@ -0,0 +1,1021 @@
+/*
+ * i.MX IPUv3 overlay driver
+ *
+ * Copyright (C) 2011 Sascha Hauer, Pengutronix
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ */
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/fs.h>
+#include <linux/delay.h>
+#include <linux/fb.h>
+#include <linux/platform_device.h>
+#include <linux/interrupt.h>
+#include <media/v4l2-dev.h>
+#include <asm/poll.h>
+#include <asm/io.h>
+#include <media/v4l2-device.h>
+#include <media/v4l2-ioctl.h>
+#include <media/videobuf2-dma-contig.h>
+#include <video/imx-ipu-v3.h>
+#include "../../../gpu/ipu-v3/ipu-prv.h"
+
+#include <media/v4l2-dev.h>
+
+#include "imx-ipu.h"
+#include "trace.h"
+
+static int usealpha;
+
+module_param(usealpha, int, 0);
+
+struct vout_buffer {
+	struct vb2_v4l2_buffer		vb;
+};
+
+#define vb2q_to_vout(q)	container_of(q, struct vout_data, vidq)
+
+enum {
+	VOUT_IDLE,
+	VOUT_STARTING,
+	VOUT_RUNNING,
+	VOUT_STOPPING,
+};
+
+struct vout_queue {
+	struct ipu_image	image;
+	void			*virt;
+	dma_addr_t		phys;
+	size_t			size;
+	struct list_head	list;
+	struct vb2_v4l2_buffer	*vb;
+	struct vout_data	*vout;
+};
+
+#define NUMBUFS	3
+
+struct vout_data {
+	struct v4l2_device	v4l2_dev;
+	struct video_device	vfd;
+
+	int			status;
+	int			next_buffer_active;
+
+	struct ipu_soc		*ipu;
+	struct ipuv3_channel	*ipu_ch;
+	struct dmfc_channel	*dmfc;
+	struct ipu_dp		*dp;
+
+	struct vb2_queue	vidq;
+
+	struct vb2_alloc_ctx	*alloc_ctx;
+	spinlock_t		lock;
+	struct device		*dev;
+
+	int			irq;
+
+	struct ipu_image	out_image; /* output image */
+	struct ipu_image	in_image; /* input image */
+	struct v4l2_window	win; /* user selected output window (after scaler) */
+	struct v4l2_rect	crop; /* cropping rectangle in the input image */
+
+	struct list_head	idle_list;
+	struct list_head	scale_list;
+	struct list_head	show_list;
+
+	struct vout_queue	*next_buffer, *showing;
+	int			width_base;
+	int			height_base;
+
+	int			opened;
+	int			dma;
+
+};
+
+static int vidioc_querycap(struct file *file, void  *priv,
+		struct v4l2_capability *cap)
+{
+	strlcpy(cap->driver, "imx-ipu-ovl", sizeof(cap->driver));
+	cap->device_caps = V4L2_CAP_VIDEO_OUTPUT | V4L2_CAP_STREAMING |
+			   V4L2_CAP_VIDEO_OVERLAY;
+	cap->capabilities = cap->device_caps | V4L2_CAP_DEVICE_CAPS;
+	strlcpy(cap->card, "imx-ipu-ovl", sizeof(cap->card));
+	strlcpy(cap->bus_info, "platform:imx-ipu-ovl", sizeof(cap->bus_info));
+
+	return 0;
+}
+
+static int vidioc_cropcap(struct file *file, void *priv,
+		struct v4l2_cropcap *cropcap)
+{
+	struct video_device *dev = video_devdata(file);
+	struct vout_data *vout = video_get_drvdata(dev);
+	struct v4l2_pix_format *pix = &vout->in_image.pix;
+
+	if (cropcap->type != V4L2_BUF_TYPE_VIDEO_OUTPUT &&
+		cropcap->type != V4L2_BUF_TYPE_VIDEO_OVERLAY)
+		return -EINVAL;
+
+	cropcap->bounds.left = 0;
+	cropcap->bounds.top = 0;
+	cropcap->bounds.width = pix->width;
+	cropcap->bounds.height = pix->height;
+	cropcap->defrect.left = 0;
+	cropcap->defrect.top = 0;
+	cropcap->defrect.width = pix->width;
+	cropcap->defrect.height = pix->height;
+	cropcap->pixelaspect.numerator = 1;
+	cropcap->pixelaspect.denominator = 1;
+
+	return 0;
+}
+
+static int ipu_ovl_vidioc_g_fmt_vid_out(struct file *file, void *fh,
+					struct v4l2_format *f)
+{
+	struct video_device *dev = video_devdata(file);
+	struct vout_data *vout = video_get_drvdata(dev);
+
+	if (f->type != V4L2_BUF_TYPE_VIDEO_OUTPUT &&
+		f->type != V4L2_BUF_TYPE_VIDEO_OVERLAY)
+		return -EINVAL;
+
+	return ipu_g_fmt(f, &vout->out_image.pix);
+}
+
+static int ipu_ovl_vidioc_try_fmt_vid_out(struct file *file, void *fh,
+					struct v4l2_format *f)
+{
+	return ipu_try_fmt(file, fh, f);
+}
+
+/*
+ * This function is a major hack. We can't leave the base framebuffer
+ * with the overlay. To make this sure we read directly from cpmem
+ * of the base layer. We rather need some notification mechanism
+ * for this.
+ */
+static void ipu_ovl_get_base_resolution(struct vout_data *vout)
+{
+	ipu_cpmem_get_base_resolution(vout->ipu, &vout->width_base,
+				      &vout->height_base);
+}
+
+static void ipu_ovl_sanitize(struct vout_data *vout)
+{
+	struct ipu_image *in = &vout->in_image;
+	struct ipu_image *out = &vout->out_image;
+	struct v4l2_window *win = &vout->win;
+	struct v4l2_rect *crop = &vout->crop;
+
+	ipu_ovl_get_base_resolution(vout);
+
+	/* Do not allow to leave base framebuffer for now */
+	if (win->w.left < 0)
+		win->w.left = 0;
+	if (win->w.top  < 0)
+		win->w.top = 0;
+	if (win->w.left + win->w.width > vout->width_base)
+		win->w.left = vout->width_base - win->w.width;
+	if (win->w.top + win->w.height > vout->height_base)
+		win->w.top = vout->height_base - win->w.height;
+
+	dev_info(vout->dev, "start: win:  %dx%d@%dx%d\n",
+			win->w.width, win->w.height, win->w.left, win->w.top);
+
+	in->rect.left = crop->left;
+	in->rect.width = crop->width;
+	in->rect.top = crop->top;
+	in->rect.height = crop->height;
+
+	out->pix.width = win->w.width;
+	out->pix.height = win->w.height;
+	out->rect.width = win->w.width;
+	out->rect.height = win->w.height;
+	out->rect.left = win->w.left;
+	out->rect.top = win->w.top;
+
+	out->rect.left = 0;
+	out->rect.top = 0;
+
+	dev_dbg(vout->dev, "result in: %dx%d crop: %dx%d@%dx%d\n",
+			in->pix.width, in->pix.height, in->rect.width,
+			in->rect.height, in->rect.left, in->rect.top);
+	dev_dbg(vout->dev, "result out: %dx%d crop: %dx%d@%dx%d\n",
+			out->pix.width, out->pix.height, out->rect.width,
+			out->rect.height, out->rect.left, out->rect.top);
+}
+
+static int ipu_ovl_vidioc_s_fmt_vid_out(struct file *file, void *fh,
+					struct v4l2_format *f)
+{
+	struct video_device *dev = video_devdata(file);
+	struct vout_data *vout = video_get_drvdata(dev);
+	struct v4l2_pix_format *pix = &vout->in_image.pix;
+	int ret;
+
+	ret = ipu_s_fmt(file, fh, f, pix);
+	if (ret)
+		return ret;
+
+	vout->win.w.left = 0;
+	vout->win.w.top = 0;
+	vout->win.w.width = pix->width;
+	vout->win.w.height = pix->height;
+
+	vout->crop.left = 0;
+	vout->crop.top = 0;
+	vout->crop.width = pix->width;
+	vout->crop.height = pix->height;
+
+	ipu_ovl_sanitize(vout);
+
+	return 0;
+}
+
+static int ipu_ovl_vidioc_g_fmt_vid_overlay(struct file *file, void *fh,
+					struct v4l2_format *f)
+{
+	struct video_device *dev = video_devdata(file);
+	struct vout_data *vout = video_get_drvdata(dev);
+
+	f->fmt.win = vout->win;
+
+	return 0;
+}
+
+static int ipu_ovl_vidioc_try_fmt_vid_overlay(struct file *file, void *fh,
+					struct v4l2_format *f)
+{
+	struct video_device *dev = video_devdata(file);
+	struct vout_data *vout = video_get_drvdata(dev);
+	struct v4l2_window *win = &f->fmt.win;
+
+	win->w.width &= ~0x3;
+	win->w.height &= ~0x1;
+
+	dev_dbg(vout->dev, "%s: %dx%d@%dx%d \n", __func__,
+			win->w.width, win->w.height, win->w.left, win->w.top);
+
+	return 0;
+}
+
+static int ipu_ovl_vidioc_s_fmt_vid_overlay(struct file *file, void *fh,
+					struct v4l2_format *f)
+{
+	struct video_device *dev = video_devdata(file);
+	struct vout_data *vout = video_get_drvdata(dev);
+	struct v4l2_window *win = &f->fmt.win;
+
+	win->w.width &= ~0x3;
+	win->w.height &= ~0x1;
+
+	dev_dbg(vout->dev, "%s: %dx%d@%dx%d \n", __func__,
+			win->w.width, win->w.height, win->w.left, win->w.top);
+
+	vout->win.w.width = win->w.width;
+	vout->win.w.height = win->w.height;
+	vout->win.w.left = win->w.left;
+	vout->win.w.top = win->w.top;
+
+	ipu_ovl_sanitize(vout);
+
+	win->w.width = vout->win.w.width;
+	win->w.height = vout->win.w.height;
+	win->w.left = vout->win.w.left;
+	win->w.top = vout->win.w.top;
+
+	return 0;
+}
+
+static int ipu_ovl_vidioc_g_crop(struct file *file, void *fh,
+				 struct v4l2_crop *crop)
+{
+	struct video_device *dev = video_devdata(file);
+	struct vout_data *vout = video_get_drvdata(dev);
+
+	crop->c = vout->crop;
+
+	return 0;
+}
+
+static int ipu_ovl_vidioc_s_crop(struct file *file, void *fh,
+				 const struct v4l2_crop *crop)
+{
+	struct video_device *dev = video_devdata(file);
+	struct vout_data *vout = video_get_drvdata(dev);
+
+	vout->crop = crop->c;
+
+	ipu_ovl_sanitize(vout);
+
+	return 0;
+}
+
+static int ipu_ovl_vidioc_reqbufs(struct file *file, void *fh,
+				  struct v4l2_requestbuffers *p)
+{
+	struct video_device *dev = video_devdata(file);
+	struct vout_data *vout = video_get_drvdata(dev);
+	struct vout_queue *q, *tmp;
+	int ret;
+	int i;
+
+	ret = vb2_ioctl_reqbufs(file, fh, p);
+	if (ret < 0)
+		return ret;
+
+	if (p->count == 0)
+		goto free_dma;
+
+	ipu_ovl_get_base_resolution(vout);
+
+	for (i = 0; i < NUMBUFS; i++) {
+		q = kzalloc(sizeof (*q), GFP_KERNEL);
+		if (!q)
+			goto free_dma;
+
+		q->size = vout->width_base * vout->height_base * 2;
+		q->virt = dma_alloc_coherent(NULL, q->size, &q->phys,
+					     GFP_DMA | GFP_KERNEL);
+		if (!q->virt) {
+			kfree(q);
+			goto free_dma;
+		}
+		q->vout = vout;
+
+		list_add_tail(&q->list, &vout->idle_list);
+	}
+
+	return 0;
+
+free_dma:
+	list_for_each_entry_safe(q, tmp, &vout->idle_list, list) {
+		if (q->virt)
+			dma_free_coherent(NULL, q->size, q->virt, q->phys);
+		list_del(&q->list);
+		kfree(q);
+	}
+	return ret;
+}
+
+static int vout_videobuf_setup(struct vb2_queue *vq, const void *parg,
+		unsigned int *count, unsigned int *num_planes,
+		unsigned int sizes[], void *alloc_ctxs[])
+{
+	struct vout_data *vout = vb2q_to_vout(vq);
+	struct ipu_image *image = &vout->in_image;
+
+	ipu_cpmem_zero(vout->ipu_ch);
+
+	*num_planes = 1;
+	sizes[0] = image->pix.sizeimage;
+	alloc_ctxs[0] = vout->alloc_ctx;
+
+	if (!*count)
+		*count = 32;
+
+	ipu_dp_set_global_alpha(vout->dp, usealpha ? 0 : 1, 0, 1);
+
+	return 0;
+}
+
+static int vout_videobuf_prepare(struct vb2_buffer *vb)
+{
+	struct vout_data *vout = vb2q_to_vout(vb->vb2_queue);
+	struct v4l2_pix_format *pix = &vout->in_image.pix;
+	struct vb2_v4l2_buffer *buf = to_vb2_v4l2_buffer(vb);
+
+	vb2_set_plane_payload(&buf->vb2_buf, 0, pix->bytesperline * pix->height);
+
+	return 0;
+}
+
+static int vout_set_next_buffer(struct vout_data *vout, struct vout_queue *q)
+{
+	if (vout->next_buffer)
+		return -EBUSY;
+
+	vout->next_buffer_active = !ipu_idmac_get_current_buffer(vout->ipu_ch);
+	ipu_cpmem_set_buffer(vout->ipu_ch, vout->next_buffer_active,
+			     q->image.phys0 + q->image.rect.left +
+			     q->image.pix.width * q->image.rect.top);
+	ipu_idmac_select_buffer(vout->ipu_ch, vout->next_buffer_active);
+	vout->next_buffer = q;
+	return 0;
+}
+
+static irqreturn_t vout_handler(int irq, void *context)
+{
+	struct vout_data *vout = context;
+	unsigned long flags;
+	struct vout_queue *q;
+	int current_active;
+	int ret;
+
+	spin_lock_irqsave(&vout->lock, flags);
+
+	if (vout->status == VOUT_IDLE || vout->status == VOUT_STARTING)
+		goto out;
+
+	current_active = ipu_idmac_get_current_buffer(vout->ipu_ch);
+
+	if (vout->next_buffer && vout->next_buffer_active == current_active) {
+		if (vout->showing) {
+			/*
+			 * this could have already happened on EOF, but we
+			 * want to avoid another 60 interrupts per second.
+			 */
+			trace_vout_done(&vout->vfd, vout->showing->vb);
+			if (vout->showing->vb)
+				vb2_buffer_done(&vout->showing->vb->vb2_buf,
+						VB2_BUF_STATE_DONE);
+			list_add_tail(&vout->showing->list, &vout->idle_list);
+			vout->showing = NULL;
+		}
+		vout->showing = vout->next_buffer;
+		vout->next_buffer = NULL;
+		trace_vout_present(&vout->vfd, vout->showing->vb);
+	} else {
+		if (vout->next_buffer == NULL)
+			dev_dbg(vout->dev, "repeat due to missing buffer\n");
+
+		if (vout->next_buffer_active != current_active)
+			dev_dbg(vout->dev,
+				"repeat due to race between vout_set_next_buffer and hardware flip\n");
+
+		if (vout->showing)
+			trace_vout_repeat(&vout->vfd, vout->showing->vb);
+	}
+
+	if (vout->status == VOUT_STOPPING) {
+		spin_unlock_irqrestore(&vout->lock, flags);
+		return IRQ_WAKE_THREAD;
+	}
+
+	if (list_empty(&vout->show_list))
+		goto out;
+
+	q = list_first_entry(&vout->show_list, struct vout_queue, list);
+
+	ret = vout_set_next_buffer(vout, q);
+	if (ret == 0)
+		list_del(&q->list);
+
+out:
+	spin_unlock_irqrestore(&vout->lock, flags);
+
+	return IRQ_HANDLED;
+}
+
+static irqreturn_t vout_threaded_handler(int irq, void *context)
+{
+	struct vout_data *vout = context;
+	unsigned long flags;
+
+	vout->status = VOUT_IDLE;
+
+	ipu_dp_disable_channel(vout->dp);
+	ipu_idmac_wait_busy(vout->ipu_ch, 100);
+
+	ipu_idmac_disable_channel(vout->ipu_ch);
+	ipu_dmfc_disable_channel(vout->dmfc);
+	spin_lock_irqsave(&vout->lock, flags);
+	if (!list_empty(&vout->show_list))
+		list_splice_tail_init(&vout->show_list, &vout->idle_list);
+	if (vout->showing) {
+		list_add_tail(&vout->showing->list, &vout->idle_list);
+		vout->showing = NULL;
+	}
+	if (vout->next_buffer) {
+		list_add_tail(&vout->next_buffer->list, &vout->idle_list);
+		vout->next_buffer = NULL;
+	}
+	spin_unlock_irqrestore(&vout->lock, flags);
+
+	return IRQ_HANDLED;
+}
+
+static int vout_enable(struct vout_queue *q)
+{
+	struct vout_data *vout = q->vout;
+	struct ipu_image *image = &q->image;
+	int ret;
+
+	ret = ipu_cpmem_set_image(vout->ipu_ch, image);
+	if (ret) {
+		dev_err(vout->dev, "setup cpmem failed with %d\n", ret);
+		return ret;
+	}
+	ipu_idmac_set_double_buffer(vout->ipu_ch, 1);
+
+	ipu_cpmem_set_buffer(vout->ipu_ch, 0, image->phys0 + image->rect.left + image->pix.width * image->rect.top);
+	ipu_idmac_select_buffer(vout->ipu_ch, 0);
+	ipu_idmac_clear_buffer(vout->ipu_ch, 1);
+
+	list_del(&q->list);
+	vout->next_buffer = q;
+	vout->next_buffer_active = 0;
+
+	ipu_cpmem_set_high_priority(vout->ipu_ch);
+
+	ret = ipu_dmfc_init_channel(vout->dmfc, image->pix.width);
+	if (ret) {
+		dev_err(vout->dev, "initializing dmfc channel failed with %d\n", ret);
+		return ret;
+	}
+
+	ipu_dmfc_enable_channel(vout->dmfc);
+	ipu_idmac_enable_channel(vout->ipu_ch);
+	ipu_dp_setup_channel(vout->dp,
+			ipu_pixelformat_to_colorspace(image->pix.pixelformat),
+			IPUV3_COLORSPACE_UNKNOWN);
+	ipu_dp_set_window_pos(vout->dp, vout->win.w.left, vout->win.w.top);
+	ipu_dp_enable_channel(vout->dp);
+
+	return 0;
+}
+
+static void vout_scaler_complete(void *context, int err)
+{
+	struct vout_queue *q = context;
+	struct vout_data *vout = q->vout;
+	unsigned long flags;
+	int ret;
+
+	trace_vout_scale_done(&vout->vfd, q->vb);
+
+	spin_lock_irqsave(&vout->lock, flags);
+
+	if (err) {
+		vb2_buffer_done(&q->vb->vb2_buf, VB2_BUF_STATE_ERROR);
+		list_move_tail(&q->list, &vout->idle_list);
+		spin_unlock_irqrestore(&vout->lock, flags);
+		return;
+	}
+
+	vb2_buffer_done(&q->vb->vb2_buf, VB2_BUF_STATE_DONE);
+	q->vb = NULL;
+
+	if (vout->status == VOUT_STARTING || vout->status == VOUT_RUNNING) {
+		if (vout->status == VOUT_RUNNING) {
+			ret = vout_set_next_buffer(vout, q);
+			if (ret < 0)
+				list_move_tail(&q->list, &vout->show_list);
+			else
+				list_del(&q->list);
+		} else {
+			list_move_tail(&q->list, &vout->show_list);
+		}
+	} else {
+		list_move_tail(&q->list, &vout->idle_list);
+	}
+
+	spin_unlock_irqrestore(&vout->lock, flags);
+
+	if (vout->status == VOUT_STARTING) {
+		vout_enable(q);
+		vout->status = VOUT_RUNNING;
+	}
+}
+
+static void vout_videobuf_queue(struct vb2_buffer *vb)
+{
+	struct vout_data *vout = vb2q_to_vout(vb->vb2_queue);
+	unsigned long flags;
+	struct ipu_image *image;
+	struct vout_queue *q;
+	int ret;
+
+	spin_lock_irqsave(&vout->lock, flags);
+
+	if (list_empty(&vout->idle_list)) {
+		vb2_buffer_done(vb, VB2_BUF_STATE_DONE);
+		spin_unlock_irqrestore(&vout->lock, flags);
+		return;
+	}
+
+	q = list_first_entry(&vout->idle_list, struct vout_queue, list);
+	q->vb = to_vb2_v4l2_buffer(vb);
+	image = &q->image;
+
+	if (vout->in_image.rect.width == vout->out_image.rect.width &&
+			vout->in_image.rect.height == vout->out_image.rect.height) {
+		if (!list_empty(&vout->show_list) && !list_is_singular(&vout->show_list)) {
+			vb2_buffer_done(vb, VB2_BUF_STATE_DONE);
+			printk("drop\n");
+			goto out;
+		}
+
+		image->pix = vout->in_image.pix;
+		image->rect = vout->in_image.rect;
+		image->phys0 = vb2_dma_contig_plane_dma_addr(vb, 0);
+
+		if (vout->status == VOUT_RUNNING) {
+			ret = vout_set_next_buffer(vout, q);
+			if (ret < 0)
+				list_move_tail(&q->list, &vout->show_list);
+			else
+				list_del(&q->list);
+		} else {
+			list_move_tail(&q->list, &vout->show_list);
+		}
+	} else {
+		image->pix = vout->out_image.pix;
+		image->rect = vout->out_image.rect;
+		image->phys0 = q->phys;
+
+		image->pix.pixelformat = V4L2_PIX_FMT_UYVY;
+		image->pix.bytesperline = image->pix.width * 2;
+
+		vout->in_image.phys0 = vb2_dma_contig_plane_dma_addr(vb, 0);
+
+		list_move_tail(&q->list, &vout->scale_list);
+
+		trace_vout_scale_run(&vout->vfd, q->vb);
+
+		spin_unlock_irqrestore(&vout->lock, flags);
+
+		ipu_image_convert(vout->ipu, &vout->in_image, image,
+			vout_scaler_complete, q, IPU_IMAGE_SCALE_PIXELPERFECT);
+		return;
+	}
+out:
+	spin_unlock_irqrestore(&vout->lock, flags);
+}
+
+static void vout_videobuf_release(struct vb2_buffer *vb)
+{
+}
+
+static int vout_videobuf_start_streaming(struct vb2_queue *vq, unsigned int count)
+{
+	struct vout_data *vout = vb2q_to_vout(vq);
+	struct vout_queue *q;
+	unsigned long flags;
+	int ret;
+
+	if (vout->status != VOUT_IDLE)
+		return -EINVAL;
+
+	vout->irq = ipu_idmac_channel_irq(vout->ipu, vout->ipu_ch, IPU_IRQ_NFACK);
+	ret = request_threaded_irq(vout->irq, vout_handler,
+				   vout_threaded_handler, IRQF_ONESHOT,
+				   "imx-ipu-ovl", vout);
+	if (ret) {
+		dev_err(vout->dev, "failed to request irq: %d\n", ret);
+		return ret;
+	}
+
+	spin_lock_irqsave(&vout->lock, flags);
+
+	vout->status = VOUT_STARTING;
+
+	if (!list_empty(&vout->show_list)) {
+		q = list_first_entry(&vout->show_list, struct vout_queue, list);
+		spin_unlock_irqrestore(&vout->lock, flags);
+		vout_enable(q);
+		vout->status = VOUT_RUNNING;
+	} else {
+		spin_unlock_irqrestore(&vout->lock, flags);
+	}
+
+	return 0;
+}
+
+static void vout_videobuf_stop_streaming(struct vb2_queue *vq)
+{
+	struct vout_data *vout = vb2q_to_vout(vq);
+	struct vout_queue *q, *tmp;
+	unsigned long flags;
+	unsigned long timeout;
+
+	spin_lock_irqsave(&vout->lock, flags);
+
+	vout->status = VOUT_STOPPING;
+
+	timeout = jiffies + msecs_to_jiffies(1000);
+
+	while (!list_empty(&vout->scale_list) || !list_empty(&vout->show_list) ||
+	       vout->next_buffer || vout->showing) {
+		spin_unlock_irqrestore(&vout->lock, flags);
+		schedule();
+		spin_lock_irqsave(&vout->lock, flags);
+
+		if (time_after(jiffies, timeout)) {
+			dev_err(vout->dev, "draining vout timed out. %d %d %p %p\n",
+					list_empty(&vout->scale_list),
+					list_empty(&vout->show_list),
+					vout->next_buffer, vout->showing);
+			break;
+
+			ipu_dp_disable_channel(vout->dp);
+			ipu_idmac_disable_channel(vout->ipu_ch);
+			ipu_dmfc_disable_channel(vout->dmfc);
+		}
+	}
+
+	vout->status = VOUT_IDLE;
+
+	spin_unlock_irqrestore(&vout->lock, flags);
+
+	free_irq(vout->irq, vout);
+
+	/* Dump remaining active buffers */
+	list_for_each_entry_safe(q, tmp, &vout->idle_list, list) {
+		if (q->vb && q->vb->vb2_buf.state == VB2_BUF_STATE_ACTIVE)
+			vb2_buffer_done(&q->vb->vb2_buf, VB2_BUF_STATE_ERROR);
+	}
+}
+
+static int vout_videobuf_init(struct vb2_buffer *vb)
+{
+	return 0;
+}
+
+static struct vb2_ops vout_videobuf_ops = {
+	.queue_setup		= vout_videobuf_setup,
+	.buf_prepare		= vout_videobuf_prepare,
+	.buf_queue		= vout_videobuf_queue,
+	.buf_cleanup		= vout_videobuf_release,
+	.buf_init		= vout_videobuf_init,
+	.start_streaming	= vout_videobuf_start_streaming,
+	.stop_streaming		= vout_videobuf_stop_streaming,
+#if 0
+	/* FIXME: do we need these? */
+	.wait_prepare		= vout_videobuf_unlock,
+	.wait_finish		= vout_videobuf_lock,
+#endif
+};
+
+static int ipu_ovl_vidioc_enum_fmt_vid_out(struct file *file, void *fh,
+		struct v4l2_fmtdesc *f)
+{
+	return ipu_enum_fmt(file, fh, f);
+}
+
+static int mxc_v4l2out_open(struct file *file)
+{
+	struct video_device *dev = video_devdata(file);
+	struct vout_data *vout = video_get_drvdata(dev);
+	struct vb2_queue *q = &vout->vidq;
+	unsigned long flags;
+	struct ipu_soc *ipu = vout->ipu;
+	int ret;
+
+	spin_lock_irqsave(&vout->lock, flags);
+
+	if (vout->opened) {
+		spin_unlock_irqrestore(&vout->lock, flags);
+		return -EBUSY;
+	}
+
+	vout->opened++;
+	spin_unlock_irqrestore(&vout->lock, flags);
+
+	vout->ipu_ch = ipu_idmac_get(ipu, vout->dma);
+	if (IS_ERR(vout->ipu_ch)) {
+		dev_err(vout->dev, "failed to get ipu idmac channel %d\n",
+			vout->dma);
+		return -EINVAL;
+	}
+	vout->dmfc = ipu_dmfc_get(ipu, vout->dma);
+	if (IS_ERR(vout->dmfc)) {
+		dev_err(vout->dev, "failed to get ipu dmfc channel\n");
+		ret = -EINVAL;
+		goto failed_dmfc;
+	}
+	vout->dp = ipu_dp_get(ipu, IPU_DP_FLOW_SYNC_FG);
+	if (IS_ERR(vout->dp)) {
+		dev_err(vout->dev, "failed to get ipu dp channel\n");
+		ret = -EINVAL;
+		goto failed_dp;
+	}
+
+	ret = ipu_dmfc_alloc_bandwidth(vout->dmfc, 1280 * 720 * 70, 64);
+	if (ret) {
+		dev_err(vout->dev, "allocating dmfc bandwidth failed with %d\n", ret);
+		goto failed_bw;
+	}
+
+	INIT_LIST_HEAD(&vout->idle_list);
+	INIT_LIST_HEAD(&vout->scale_list);
+	INIT_LIST_HEAD(&vout->show_list);
+
+	q->type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
+	q->io_modes = VB2_MMAP | VB2_USERPTR | VB2_DMABUF;
+	q->drv_priv = vout;
+	q->ops = &vout_videobuf_ops;
+	q->mem_ops = &vb2_dma_contig_memops;
+	q->timestamp_flags = V4L2_BUF_FLAG_TIMESTAMP_MONOTONIC;
+	q->buf_struct_size = sizeof(struct vb2_v4l2_buffer);
+
+	ret = vb2_queue_init(q);
+	if (ret < 0) {
+		spin_lock_irqsave(&vout->lock, flags);
+		vout->opened--;
+		spin_unlock_irqrestore(&vout->lock, flags);
+	}
+
+failed_bw:
+	ipu_dp_put(vout->dp);
+failed_dp:
+	ipu_dmfc_put(vout->dmfc);
+failed_dmfc:
+	ipu_idmac_put(vout->ipu_ch);
+	return ret;
+}
+
+static int mxc_v4l2out_close(struct file *file)
+{
+	struct video_device *dev = video_devdata(file);
+	struct vout_data *vout = video_get_drvdata(dev);
+	struct vout_queue *q, *tmp;
+	unsigned long flags;
+
+	vb2_queue_release(&vout->vidq);
+
+	list_for_each_entry_safe(q, tmp, &vout->idle_list, list) {
+		if (q->virt)
+			dma_free_coherent(NULL, q->size, q->virt, q->phys);
+		list_del(&q->list);
+		kfree(q);
+	}
+
+	ipu_dmfc_free_bandwidth(vout->dmfc);
+	ipu_dp_put(vout->dp);
+	ipu_dmfc_put(vout->dmfc);
+	ipu_idmac_put(vout->ipu_ch);
+
+	spin_lock_irqsave(&vout->lock, flags);
+	vout->opened--;
+	spin_unlock_irqrestore(&vout->lock, flags);
+
+	return 0;
+}
+
+static const struct v4l2_ioctl_ops mxc_ioctl_ops = {
+	.vidioc_querycap		= vidioc_querycap,
+	.vidioc_cropcap			= vidioc_cropcap,
+
+	.vidioc_enum_fmt_vid_out	= ipu_ovl_vidioc_enum_fmt_vid_out,
+	.vidioc_g_fmt_vid_out		= ipu_ovl_vidioc_g_fmt_vid_out,
+	.vidioc_s_fmt_vid_out		= ipu_ovl_vidioc_s_fmt_vid_out,
+	.vidioc_try_fmt_vid_out		= ipu_ovl_vidioc_try_fmt_vid_out,
+
+	.vidioc_enum_fmt_vid_overlay	= ipu_ovl_vidioc_enum_fmt_vid_out,
+	.vidioc_g_fmt_vid_overlay	= ipu_ovl_vidioc_g_fmt_vid_overlay,
+	.vidioc_s_fmt_vid_overlay	= ipu_ovl_vidioc_s_fmt_vid_overlay,
+	.vidioc_try_fmt_vid_overlay	= ipu_ovl_vidioc_try_fmt_vid_overlay,
+
+	.vidioc_s_crop			= ipu_ovl_vidioc_s_crop,
+	.vidioc_g_crop			= ipu_ovl_vidioc_g_crop,
+
+	.vidioc_reqbufs			= ipu_ovl_vidioc_reqbufs,
+	.vidioc_querybuf		= vb2_ioctl_querybuf,
+	.vidioc_qbuf			= vb2_ioctl_qbuf,
+	.vidioc_expbuf			= vb2_ioctl_expbuf,
+	.vidioc_dqbuf			= vb2_ioctl_dqbuf,
+	.vidioc_create_bufs		= vb2_ioctl_create_bufs,
+	.vidioc_streamon		= vb2_ioctl_streamon,
+	.vidioc_streamoff		= vb2_ioctl_streamoff,
+#ifdef CONFIG_VIDEO_V4L1_COMPAT
+	.vidiocgmbuf			= vidiocgmbuf,
+#endif
+};
+
+static struct v4l2_file_operations mxc_v4l2out_fops = {
+	.owner		= THIS_MODULE,
+	.open		= mxc_v4l2out_open,
+	.release	= mxc_v4l2out_close,
+	.unlocked_ioctl	= video_ioctl2,
+	.mmap		= vb2_fop_mmap,
+};
+
+static u64 vout_dmamask = ~(u32)0;
+
+static int mxc_v4l2out_probe(struct platform_device *pdev)
+{
+	struct ipu_client_platformdata *pdata = pdev->dev.platform_data;
+	struct vout_data *vout;
+	struct ipu_soc *ipu = dev_get_drvdata(pdev->dev.parent);
+	int ret;
+
+	if (!pdata)
+		return -EINVAL;
+
+	pdev->dev.dma_mask = &vout_dmamask;
+	pdev->dev.coherent_dma_mask = 0xffffffff;
+
+	vout = kzalloc(sizeof(struct vout_data), GFP_KERNEL);
+	if (!vout)
+		return -ENOMEM;
+
+	vout->ipu = ipu;
+
+	ret = v4l2_device_register(&pdev->dev, &vout->v4l2_dev);
+	if (ret)
+		goto failed_v4l2_dev_register;
+
+	vout->alloc_ctx = vb2_dma_contig_init_ctx(&pdev->dev);
+	if (IS_ERR(vout->alloc_ctx)) {
+		ret = PTR_ERR(vout->alloc_ctx);
+		goto failed_vb2_alloc;
+	}
+
+	vout->dma = pdata->dma[0];
+
+	vout->vfd.minor = -1;
+
+	strcpy(vout->vfd.name, "vout");
+	vout->vfd.fops = &mxc_v4l2out_fops;
+	vout->vfd.ioctl_ops = &mxc_ioctl_ops;
+	vout->vfd.release = video_device_release_empty;
+	vout->vfd.vfl_dir = VFL_DIR_TX;
+	vout->vfd.v4l2_dev = &vout->v4l2_dev;
+	vout->vfd.queue = &vout->vidq;
+
+	spin_lock_init(&vout->lock);
+	vout->dev = &pdev->dev;
+
+	ret = video_register_device(&vout->vfd, VFL_TYPE_GRABBER, -1);
+	if (ret) {
+		dev_err(&pdev->dev, "register failed with %d\n", ret);
+		goto failed_register;
+	}
+
+	dev_info(&pdev->dev, "registered as /dev/video%d\n", vout->vfd.num);
+
+	platform_set_drvdata(pdev, vout);
+	video_set_drvdata(&vout->vfd, vout);
+
+	return 0;
+
+failed_register:
+	vb2_dma_contig_cleanup_ctx(vout->alloc_ctx);
+failed_vb2_alloc:
+	v4l2_device_unregister(&vout->v4l2_dev);
+failed_v4l2_dev_register:
+	kfree(vout);
+	return ret;
+
+	return 0;
+}
+
+static int mxc_v4l2out_remove(struct platform_device *pdev)
+{
+	struct vout_data *vout = platform_get_drvdata(pdev);
+
+	video_unregister_device(&vout->vfd);
+	v4l2_device_unregister(&vout->v4l2_dev);
+	vb2_dma_contig_cleanup_ctx(vout->alloc_ctx);
+
+	kfree(vout);
+
+	return 0;
+}
+
+static const struct platform_device_id mxc_v4l2out_id[] = {
+	{ "imx-ipuv3-ovl" },
+	{}
+};
+MODULE_DEVICE_TABLE(platform, mxc_v4l2out_id);
+
+static struct platform_driver mxc_v4l2out_driver = {
+	.driver = {
+		   .name = "imx-ipuv3-ovl",
+	},
+	.probe = mxc_v4l2out_probe,
+	.remove = mxc_v4l2out_remove,
+};
+
+static int mxc_v4l2out_init(void)
+{
+	return platform_driver_register(&mxc_v4l2out_driver);
+}
+
+static void mxc_v4l2out_exit(void)
+{
+	platform_driver_unregister(&mxc_v4l2out_driver);
+}
+
+module_init(mxc_v4l2out_init);
+module_exit(mxc_v4l2out_exit);
+
+MODULE_AUTHOR("Sascha Hauer <s.hauer@pengutronix.de>");
+MODULE_DESCRIPTION("V4L2-driver for MXC video output");
+MODULE_LICENSE("GPL");
+MODULE_SUPPORTED_DEVICE("video");
