From: Philipp Zabel <p.zabel@pengutronix.de>
Date: Fri, 7 Nov 2014 15:00:17 +0100
Subject: [PATCH] gpu: ipu-v3: use passthrough mode for 16-bit YUV 4:2:2 mbus
 formats

According to the i.MX6DQ Reference Manual v1, chapter 37.4.3.9 (16 bit camera
support), the only 16-bit mbus format that the IPU can process on the fly is
RGB565. YUYV8_1X16 and UYVY8_1X16 need to be written to memory first as generic
16-bit data (passthrough mode) in gated clock mode.

Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
---
 drivers/gpu/ipu-v3/ipu-csi.c | 17 ++++++++++++-----
 1 file changed, 12 insertions(+), 5 deletions(-)

diff --git a/drivers/gpu/ipu-v3/ipu-csi.c b/drivers/gpu/ipu-v3/ipu-csi.c
index becacaba6a32..86f11aaa041d 100644
--- a/drivers/gpu/ipu-v3/ipu-csi.c
+++ b/drivers/gpu/ipu-v3/ipu-csi.c
@@ -224,7 +224,8 @@ static int ipu_csi_set_testgen_mclk(struct ipu_csi *csi, u32 pixel_clk,
  * Find the CSI data format and data width for the given V4L2 media
  * bus pixel format code.
  */
-static int mbus_code_to_bus_cfg(struct ipu_csi_bus_config *cfg, u32 mbus_code)
+static int mbus_code_to_bus_cfg(struct ipu_csi_bus_config *cfg, u32 mbus_code,
+				enum v4l2_mbus_type mbus_type)
 {
 	switch (mbus_code) {
 	case MEDIA_BUS_FMT_BGR565_2X8_BE:
@@ -258,12 +259,18 @@ static int mbus_code_to_bus_cfg(struct ipu_csi_bus_config *cfg, u32 mbus_code)
 		cfg->data_width = IPU_CSI_DATA_WIDTH_8;
 		break;
 	case MEDIA_BUS_FMT_UYVY8_1X16:
-		cfg->data_fmt = CSI_SENS_CONF_DATA_FMT_YUV422_UYVY;
+		if (mbus_type == V4L2_MBUS_PARALLEL)
+			cfg->data_fmt = CSI_SENS_CONF_DATA_FMT_BAYER;
+		else
+			cfg->data_fmt = CSI_SENS_CONF_DATA_FMT_YUV422_UYVY;
 		cfg->mipi_dt = MIPI_DT_YUV422;
 		cfg->data_width = IPU_CSI_DATA_WIDTH_16;
 		break;
 	case MEDIA_BUS_FMT_YUYV8_1X16:
-		cfg->data_fmt = CSI_SENS_CONF_DATA_FMT_YUV422_YUYV;
+		if (mbus_type == V4L2_MBUS_PARALLEL)
+			cfg->data_fmt = CSI_SENS_CONF_DATA_FMT_BAYER;
+		else
+			cfg->data_fmt = CSI_SENS_CONF_DATA_FMT_YUV422_YUYV;
 		cfg->mipi_dt = MIPI_DT_YUV422;
 		cfg->data_width = IPU_CSI_DATA_WIDTH_16;
 		break;
@@ -328,7 +335,7 @@ static void fill_csi_bus_cfg(struct ipu_csi_bus_config *csicfg,
 {
 	memset(csicfg, 0, sizeof(*csicfg));
 
-	mbus_code_to_bus_cfg(csicfg, mbus_fmt->code);
+	mbus_code_to_bus_cfg(csicfg, mbus_fmt->code, mbus_cfg->type);
 
 	switch (mbus_cfg->type) {
 	case V4L2_MBUS_PARALLEL:
@@ -574,7 +581,7 @@ int ipu_csi_set_mipi_datatype(struct ipu_csi *csi, u32 vc,
 	if (vc > 3)
 		return -EINVAL;
 
-	mbus_code_to_bus_cfg(&cfg, mbus_fmt->code);
+	mbus_code_to_bus_cfg(&cfg, mbus_fmt->code, V4L2_MBUS_CSI2);
 
 	spin_lock_irqsave(&csi->lock, flags);
 
