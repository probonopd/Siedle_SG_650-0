From: Philipp Zabel <p.zabel@pengutronix.de>
Date: Tue, 22 Jul 2014 10:43:55 +0200
Subject: [PATCH] [media] coda: add SPS fixup code for frame sizes that are not
 multiples of 16

This adds RBSP parsing code and a SPS fixup routine to replace the cropping
information in the headers produced by the firmware with the correct values.

Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
---
 drivers/media/platform/coda/coda-bit.c  |   7 ++
 drivers/media/platform/coda/coda-h264.c | 169 ++++++++++++++++++++++++++++++++
 drivers/media/platform/coda/coda.h      |   2 +
 3 files changed, 178 insertions(+)

diff --git a/drivers/media/platform/coda/coda-bit.c b/drivers/media/platform/coda/coda-bit.c
index 759b09d641cc..2e7959c70a83 100644
--- a/drivers/media/platform/coda/coda-bit.c
+++ b/drivers/media/platform/coda/coda-bit.c
@@ -1231,6 +1231,13 @@ static int coda_start_encoding(struct coda_ctx *ctx)
 		if (ret < 0)
 			goto out;
 
+		if ((q_data_src->width % 16) || (q_data_src->height % 16)) {
+			coda_sps_fixup(ctx, q_data_src->width,
+				       q_data_src->height,
+				       &ctx->vpu_header[0][0],
+				       &ctx->vpu_header_size[0]);
+		}
+
 		/*
 		 * Get PPS in the first frame and copy it to an
 		 * intermediate buffer.
diff --git a/drivers/media/platform/coda/coda-h264.c b/drivers/media/platform/coda/coda-h264.c
index 5ae0db0b9688..e10e5497bbec 100644
--- a/drivers/media/platform/coda/coda-h264.c
+++ b/drivers/media/platform/coda/coda-h264.c
@@ -101,3 +101,172 @@ int coda_h264_level(int level_idc)
 	default: return -EINVAL;
 	}
 }
+
+struct rbsp {
+	char *buf;
+	int pos;
+};
+
+static inline int rbsp_read_bit(struct rbsp *rbsp)
+{
+	int shift = 7 - (rbsp->pos % 8);
+	int ofs = rbsp->pos++ / 8;
+
+	return (rbsp->buf[ofs] >> shift) & 1;
+}
+
+static inline void rbsp_write_bit(struct rbsp *rbsp, int bit)
+{
+	int shift = 7 - (rbsp->pos % 8);
+	int ofs = rbsp->pos++ / 8;
+
+	rbsp->buf[ofs] &= ~BIT(shift);
+	rbsp->buf[ofs] |= bit << shift;
+}
+
+static inline int rbsp_read_bits(struct rbsp *rbsp, int num)
+{
+	int i, ret = 0;
+
+	for (i = 0; i < num; i++)
+		ret |= rbsp_read_bit(rbsp) << (num - i - 1);
+
+	return ret;
+}
+
+static void rbsp_write_bits(struct rbsp *rbsp, int num, int value)
+{
+	while (num--)
+		rbsp_write_bit(rbsp, (value >> num) & 1);
+}
+
+static int rbsp_read_uev(struct rbsp *rbsp)
+{
+	int leading_zero_bits = 0;
+	int tmp = 0;
+
+	while (!rbsp_read_bit(rbsp))
+		leading_zero_bits++;
+
+	if (leading_zero_bits > 0)
+		tmp = rbsp_read_bits(rbsp, leading_zero_bits);
+
+	return (1 << leading_zero_bits) - 1 + tmp;
+}
+
+static void rbsp_write_uev(struct rbsp *rbsp, int value)
+{
+	int tmp = value + 1;
+	int leading_zero_bits = fls(tmp) - 1;
+	int i;
+
+	for (i = 0; i < leading_zero_bits; i++)
+		rbsp_write_bit(rbsp, 0);
+
+	rbsp_write_bits(rbsp, leading_zero_bits + 1, tmp);
+}
+
+static int rbsp_read_sev(struct rbsp *rbsp)
+{
+	int tmp = rbsp_read_uev(rbsp);
+
+	if (tmp & 1)
+		return (tmp + 1) / 2;
+	else
+		return -(tmp / 2);
+}
+
+void coda_sps_fixup(struct coda_ctx *ctx, int width, int height, char *buf,
+		    int *size)
+{
+	int profile_idc, level_idc, seq_parameter_set_id;
+	int /* log2_max_frame_num_minus4, */ pic_order_cnt_type;
+	int max_num_ref_frames, gaps_in_frame_num_value_allowed_flag;
+	int pic_width_in_mbs_minus1, pic_height_in_map_units_minus1;
+	int frame_mbs_only_flag, direct_8x8_inference_flag, frame_cropping_flag;
+	int vui_parameters_present_flag, crop_right, crop_bottom;
+	struct rbsp sps;
+	int pos;
+
+	sps.buf = buf + 5; /* Skip NAL header */
+	sps.pos = 0;
+
+	profile_idc = rbsp_read_bits(&sps, 8);
+	sps.pos += 8; /* Skip constraint_set[0-5]_flag, reserved_zero_2bits */
+	level_idc = rbsp_read_bits(&sps, 8);
+	seq_parameter_set_id = rbsp_read_uev(&sps);
+
+	if (profile_idc == 100 || profile_idc == 110 || profile_idc == 122 ||
+	    profile_idc == 244 || profile_idc == 44 || profile_idc == 83 ||
+	    profile_idc == 86 || profile_idc == 118 || profile_idc == 128) {
+		dev_err(ctx->fh.vdev->dev_parent,
+			"%s: Handling profile_idc %d not implemented\n",
+			__func__, profile_idc);
+		return;
+	}
+
+	/* log2_max_frame_num_minus4 = */ rbsp_read_uev(&sps);
+	pic_order_cnt_type = rbsp_read_uev(&sps);
+
+	if (pic_order_cnt_type == 0) {
+		/* int log2_max_pic_order_cnt_lsb_minus4 = */ rbsp_read_uev(&sps);
+	} else if (pic_order_cnt_type == 1) {
+		int i, num_ref_frames_in_pic_order_cnt_cycle;
+
+		/* int delta_pic_order_always_zero_flag = */ rbsp_read_bit(&sps);
+		/* int offset_for_non_ref_pic = */ rbsp_read_sev(&sps);
+		/* int offset_for_top_to_bottom_field = */ rbsp_read_sev(&sps);
+
+		num_ref_frames_in_pic_order_cnt_cycle = rbsp_read_uev(&sps);
+		for (i = 0; i < num_ref_frames_in_pic_order_cnt_cycle; i++) {
+			/* int offset_for_ref_frame = */ rbsp_read_sev(&sps);
+		}
+	}
+
+	max_num_ref_frames = rbsp_read_uev(&sps);
+
+	gaps_in_frame_num_value_allowed_flag = rbsp_read_bit(&sps);
+	pic_width_in_mbs_minus1 = rbsp_read_uev(&sps);
+	pic_height_in_map_units_minus1 = rbsp_read_uev(&sps);
+	frame_mbs_only_flag = rbsp_read_bit(&sps);
+	if (!frame_mbs_only_flag) {
+		/* int mb_adaptive_frame_field_flag = */ rbsp_read_bit(&sps);
+	}
+	direct_8x8_inference_flag = rbsp_read_bit(&sps);
+
+	pos = sps.pos;
+	frame_cropping_flag = rbsp_read_bit(&sps);
+	if (frame_cropping_flag) {
+		int crop_left, crop_right, crop_top, crop_bottom;
+		crop_left = rbsp_read_uev(&sps);
+		crop_right = rbsp_read_uev(&sps);
+		crop_top = rbsp_read_uev(&sps);
+		crop_bottom = rbsp_read_uev(&sps);
+	}
+	vui_parameters_present_flag = rbsp_read_bit(&sps);
+	if (vui_parameters_present_flag) {
+		dev_err(ctx->fh.vdev->dev_parent,
+			"%s: Handling vui_parameters not implemented\n",
+			__func__);
+		return;
+	}
+
+	crop_right = round_up(width, 16) - width;
+	crop_bottom = round_up(height, 16) - height;
+	crop_right /= 2;
+	if (frame_mbs_only_flag)
+		crop_bottom /= 2;
+	else
+		crop_bottom /= 4;
+
+	sps.pos = pos;
+	frame_cropping_flag = 1;
+	rbsp_write_bit(&sps, frame_cropping_flag);
+	rbsp_write_uev(&sps, 0); /* crop_left */
+	rbsp_write_uev(&sps, crop_right);
+	rbsp_write_uev(&sps, 0); /* crop_top */
+	rbsp_write_uev(&sps, crop_bottom);
+	rbsp_write_bit(&sps, vui_parameters_present_flag);
+	rbsp_write_bit(&sps, 1);
+	*size = 5 + DIV_ROUND_UP(sps.pos, 8);
+}
diff --git a/drivers/media/platform/coda/coda.h b/drivers/media/platform/coda/coda.h
index 873ff82c59d6..eb27e0210926 100644
--- a/drivers/media/platform/coda/coda.h
+++ b/drivers/media/platform/coda/coda.h
@@ -304,6 +304,8 @@ int coda_h264_padding(int size, char *p);
 int coda_h264_profile(int profile_idc);
 int coda_h264_level(int level_idc);
 int coda_sps_parse_profile(struct coda_ctx *ctx, struct vb2_buffer *vb);
+void coda_sps_fixup(struct coda_ctx *ctx, int width, int height, char *buf,
+		    int *size);
 
 bool coda_jpeg_check_buffer(struct coda_ctx *ctx, struct vb2_buffer *vb);
 int coda_jpeg_decode_header(struct coda_ctx *ctx, struct vb2_buffer *vb);
