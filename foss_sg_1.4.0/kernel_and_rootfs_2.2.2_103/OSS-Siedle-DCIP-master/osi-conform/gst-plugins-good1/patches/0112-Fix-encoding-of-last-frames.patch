From: Enrico Jorns <ejo@pengutronix.de>
Date: Fri, 23 Jan 2015 16:47:00 +0100
Subject: [PATCH] Fix encoding of last frames

EOS terminated encoder task too early and forwardes EOS too early.

* Move core of gst_v4l2_video_enc_loop () into
  gst_v4l2_video_enc_push_frame ()

* Kill encoder task in finish function
* Empty remaining buffers
---
 sys/v4l2/gstv4l2videoenc.c | 50 +++++++++++++++++++++++++++-------------------
 1 file changed, 29 insertions(+), 21 deletions(-)

diff --git a/sys/v4l2/gstv4l2videoenc.c b/sys/v4l2/gstv4l2videoenc.c
index 03c8a07a7ec1..9fafa95713d5 100644
--- a/sys/v4l2/gstv4l2videoenc.c
+++ b/sys/v4l2/gstv4l2videoenc.c
@@ -41,6 +41,7 @@ GST_DEBUG_CATEGORY_STATIC (gst_v4l2_video_enc_debug);
 #define MAX_CODEC_FRAME (2 * 1024 * 1024)
 
 static gboolean gst_v4l2_video_enc_flush (GstVideoEncoder * encoder);
+static GstFlowReturn gst_v4l2_video_enc_push_frame (GstVideoEncoder * encoder);
 
 enum
 {
@@ -303,33 +304,26 @@ gst_v4l2_video_enc_finish (GstVideoEncoder * encoder)
   GstBuffer *buffer;
 
   if (!g_atomic_int_get (&self->processing))
-    goto done;
+    return ret;
 
   GST_DEBUG_OBJECT (self, "Finishing encoding");
 
-  /* Keep queuing empty buffers until the processing thread has stopped,
-   * _pool_process() will return FLUSHING when that happened */
+  /* Kill loop task */
   GST_VIDEO_ENCODER_STREAM_UNLOCK (encoder);
-  while (ret == GST_FLOW_OK) {
-    buffer = gst_buffer_new ();
-    ret =
-        gst_v4l2_buffer_pool_process (GST_V4L2_BUFFER_POOL
-        (self->v4l2output->pool), &buffer);
-    gst_buffer_unref (buffer);
-  }
-
-  /* and ensure the processing thread has stopped in case another error
-   * occured. */
-  gst_v4l2_object_unlock (self->v4l2capture);
   gst_pad_stop_task (encoder->srcpad);
   GST_VIDEO_ENCODER_STREAM_LOCK (encoder);
 
-  if (ret == GST_FLOW_FLUSHING)
-    ret = self->output_flow;
+  if (self->output_flow != GST_FLOW_OK)
+    return self->output_flow;
+
+  while (ret == GST_FLOW_OK && gst_video_encoder_get_frames (encoder))
+    ret = gst_v4l2_video_enc_push_frame (encoder);
+
+  gst_v4l2_object_unlock (self->v4l2output);
+
 
   GST_DEBUG_OBJECT (encoder, "Done draining buffers");
 
-done:
   return ret;
 }
 
@@ -364,8 +358,8 @@ gst_v4l2_video_enc_get_oldest_frame (GstVideoEncoder * encoder)
   return frame;
 }
 
-static void
-gst_v4l2_video_enc_loop (GstVideoEncoder * encoder)
+static GstFlowReturn
+gst_v4l2_video_enc_push_frame (GstVideoEncoder * encoder)
 {
   GstV4l2VideoEnc *self = GST_V4L2_VIDEO_ENC (encoder);
   GstVideoCodecFrame *frame;
@@ -401,17 +395,31 @@ gst_v4l2_video_enc_loop (GstVideoEncoder * encoder)
 
     if (ret != GST_FLOW_OK)
       goto beach;
+
   } else {
     GST_WARNING_OBJECT (encoder, "Encoder is producing too many buffers");
     gst_buffer_unref (buffer);
   }
 
-  return;
+  return ret;
 
 beach:
-  GST_DEBUG_OBJECT (encoder, "Leaving output thread");
 
   gst_buffer_replace (&buffer, NULL);
+  return ret;
+}
+
+static void
+gst_v4l2_video_enc_loop (GstVideoEncoder * encoder)
+{
+  GstV4l2VideoEnc *self = GST_V4L2_VIDEO_ENC (encoder);
+  GstFlowReturn ret;
+
+  ret = gst_v4l2_video_enc_push_frame (encoder);
+  if (ret == GST_FLOW_OK)
+    return;
+
+  GST_INFO_OBJECT (encoder, "Leaving output thread");
   self->output_flow = ret;
   g_atomic_int_set (&self->processing, FALSE);
   gst_v4l2_object_unlock (self->v4l2output);
