From: Enrico Jorns <ejo@pengutronix.de>
Date: Tue, 13 Jan 2015 16:43:29 +0100
Subject: [PATCH] v4l2: Generic encoder and decoder elements

---
 sys/v4l2/gstv4l2.c         |  6 +++++
 sys/v4l2/gstv4l2object.c   | 13 ++++++++++
 sys/v4l2/gstv4l2object.h   |  1 +
 sys/v4l2/gstv4l2videodec.c | 24 ++++++++++++++++---
 sys/v4l2/gstv4l2videoenc.c | 24 ++++++++++++++++---
 sys/v4l2/v4l2-utils.c      | 60 +++++++++++++++++++++++-----------------------
 6 files changed, 92 insertions(+), 36 deletions(-)

diff --git a/sys/v4l2/gstv4l2.c b/sys/v4l2/gstv4l2.c
index 242e9c5b178a..17ba81447019 100644
--- a/sys/v4l2/gstv4l2.c
+++ b/sys/v4l2/gstv4l2.c
@@ -46,6 +46,8 @@
 #include "gstv4l2src.h"
 #include "gstv4l2sink.h"
 #include "gstv4l2radio.h"
+#include "gstv4l2videodec.h"
+#include "gstv4l2videoenc.h"
 #include "gstv4l2deviceprovider.h"
 #include "gstv4l2transform.h"
 
@@ -220,6 +222,10 @@ plugin_init (GstPlugin * plugin)
           GST_TYPE_V4L2RADIO) ||
       !gst_element_register (plugin, "v4l2convert", GST_RANK_NONE,
           GST_TYPE_V4L2_TRANSFORM) ||
+      !gst_element_register (plugin, "v4l2videodec", GST_RANK_NONE,
+          GST_TYPE_V4L2_VIDEO_DEC) ||
+      !gst_element_register (plugin, "v4l2videoenc", GST_RANK_NONE,
+          GST_TYPE_V4L2_VIDEO_ENC) ||
       !gst_device_provider_register (plugin, "v4l2deviceprovider",
           GST_RANK_PRIMARY, GST_TYPE_V4L2_DEVICE_PROVIDER)
       /* etc. */
diff --git a/sys/v4l2/gstv4l2object.c b/sys/v4l2/gstv4l2object.c
index 35eda7230af6..1dfda9c3adaf 100644
--- a/sys/v4l2/gstv4l2object.c
+++ b/sys/v4l2/gstv4l2object.c
@@ -42,6 +42,7 @@
 #include "gstv4l2colorbalance.h"
 
 #include "gst/gst-i18n-plugin.h"
+#include "gstv4l2videoenc.h"
 
 #include <gst/video/video.h>
 
@@ -467,6 +468,18 @@ gst_v4l2_object_install_m2m_subclass_properties_helper (GObjectClass *
           NULL, G_PARAM_READABLE | G_PARAM_STATIC_STRINGS));
 }
 
+void
+gst_v4l2_subclass_get_property (GObject * object,
+    guint prop_id, GValue * value, GParamSpec * pspec)
+{
+  GstV4l2VideoEnc *self = GST_V4L2_VIDEO_ENC (object);
+
+  if (!gst_v4l2_object_get_property_helper (self->v4l2output,
+          prop_id, value, pspec)) {
+    G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+  }
+}
+
 GstV4l2Object *
 gst_v4l2_object_new (GstElement * element,
     enum v4l2_buf_type type,
diff --git a/sys/v4l2/gstv4l2object.h b/sys/v4l2/gstv4l2object.h
index 20cc980a43dc..5ac9e3576480 100644
--- a/sys/v4l2/gstv4l2object.h
+++ b/sys/v4l2/gstv4l2object.h
@@ -215,6 +215,7 @@ void         gst_v4l2_object_install_properties_helper (GObjectClass * gobject_c
 
 void         gst_v4l2_object_install_m2m_properties_helper (GObjectClass * gobject_class);
 void         gst_v4l2_object_install_m2m_subclass_properties_helper (GObjectClass * gobject_class);
+void         gst_v4l2_subclass_get_property (GObject * object, guint prop_id, GValue * value, GParamSpec * pspec);
 
 gboolean     gst_v4l2_object_set_property_helper       (GstV4l2Object * v4l2object,
                                                         guint prop_id,
diff --git a/sys/v4l2/gstv4l2videodec.c b/sys/v4l2/gstv4l2videodec.c
index d79f396d07f2..c767a29cfb49 100644
--- a/sys/v4l2/gstv4l2videodec.c
+++ b/sys/v4l2/gstv4l2videodec.c
@@ -35,6 +35,8 @@
 #include <string.h>
 #include <gst/gst-i18n-plugin.h>
 
+#define DEFAULT_PROP_DEVICE "/dev/video10"
+
 GST_DEBUG_CATEGORY_STATIC (gst_v4l2_video_dec_debug);
 #define GST_CAT_DEFAULT gst_v4l2_video_dec_debug
 
@@ -47,8 +49,7 @@ enum
 };
 
 #define gst_v4l2_video_dec_parent_class parent_class
-G_DEFINE_ABSTRACT_TYPE (GstV4l2VideoDec, gst_v4l2_video_dec,
-    GST_TYPE_VIDEO_DECODER);
+G_DEFINE_TYPE (GstV4l2VideoDec, gst_v4l2_video_dec, GST_TYPE_VIDEO_DECODER);
 
 static void
 gst_v4l2_video_dec_set_property (GObject * object,
@@ -880,7 +881,17 @@ gst_v4l2_video_dec_finalize (GObject * object)
 static void
 gst_v4l2_video_dec_init (GstV4l2VideoDec * self)
 {
-  /* V4L2 object are created in subinstance_init */
+  self->v4l2output = gst_v4l2_object_new (GST_ELEMENT (self),
+      V4L2_BUF_TYPE_VIDEO_OUTPUT, DEFAULT_PROP_DEVICE,
+      gst_v4l2_get_output, gst_v4l2_set_output, NULL);
+  self->v4l2output->no_initial_format = TRUE;
+  self->v4l2output->keep_aspect = FALSE;
+
+  self->v4l2capture = gst_v4l2_object_new (GST_ELEMENT (self),
+      V4L2_BUF_TYPE_VIDEO_CAPTURE, DEFAULT_PROP_DEVICE,
+      gst_v4l2_get_input, gst_v4l2_set_input, NULL);
+  self->v4l2capture->no_initial_format = TRUE;
+  self->v4l2output->keep_aspect = FALSE;
 }
 
 static void
@@ -905,6 +916,13 @@ gst_v4l2_video_dec_class_init (GstV4l2VideoDecClass * klass)
       "Decode video streams via V4L2 API",
       "Nicolas Dufresne <nicolas.dufresne@collabora.co.uk>");
 
+  gst_element_class_add_pad_template (element_class,
+      gst_pad_template_new ("sink", GST_PAD_SINK, GST_PAD_ALWAYS,
+          gst_v4l2_object_get_codec_caps ()));
+  gst_element_class_add_pad_template (element_class,
+      gst_pad_template_new ("src", GST_PAD_SRC, GST_PAD_ALWAYS,
+          gst_v4l2_object_get_raw_caps ()));
+
   gobject_class->dispose = GST_DEBUG_FUNCPTR (gst_v4l2_video_dec_dispose);
   gobject_class->finalize = GST_DEBUG_FUNCPTR (gst_v4l2_video_dec_finalize);
   gobject_class->set_property =
diff --git a/sys/v4l2/gstv4l2videoenc.c b/sys/v4l2/gstv4l2videoenc.c
index 02fbe8cf1b2f..1109c2b0c8c0 100644
--- a/sys/v4l2/gstv4l2videoenc.c
+++ b/sys/v4l2/gstv4l2videoenc.c
@@ -35,6 +35,8 @@
 #include <string.h>
 #include <gst/gst-i18n-plugin.h>
 
+#define DEFAULT_PROP_DEVICE "/dev/video10"
+
 GST_DEBUG_CATEGORY_STATIC (gst_v4l2_video_enc_debug);
 #define GST_CAT_DEFAULT gst_v4l2_video_enc_debug
 
@@ -50,8 +52,7 @@ enum
 };
 
 #define gst_v4l2_video_enc_parent_class parent_class
-G_DEFINE_ABSTRACT_TYPE (GstV4l2VideoEnc, gst_v4l2_video_enc,
-    GST_TYPE_VIDEO_ENCODER);
+G_DEFINE_TYPE (GstV4l2VideoEnc, gst_v4l2_video_enc, GST_TYPE_VIDEO_ENCODER);
 
 static void
 gst_v4l2_video_enc_set_property (GObject * object,
@@ -812,7 +813,17 @@ gst_v4l2_video_enc_finalize (GObject * object)
 static void
 gst_v4l2_video_enc_init (GstV4l2VideoEnc * self)
 {
-  /* V4L2 object are created in subinstance_init */
+  self->v4l2output = gst_v4l2_object_new (GST_ELEMENT (self),
+      V4L2_BUF_TYPE_VIDEO_OUTPUT, DEFAULT_PROP_DEVICE,
+      gst_v4l2_get_output, gst_v4l2_set_output, NULL);
+  self->v4l2output->no_initial_format = TRUE;
+  self->v4l2output->keep_aspect = FALSE;
+
+  self->v4l2capture = gst_v4l2_object_new (GST_ELEMENT (self),
+      V4L2_BUF_TYPE_VIDEO_CAPTURE, DEFAULT_PROP_DEVICE,
+      gst_v4l2_get_input, gst_v4l2_set_input, NULL);
+  self->v4l2capture->no_initial_format = TRUE;
+  self->v4l2output->keep_aspect = FALSE;
 }
 
 static void
@@ -836,6 +847,13 @@ gst_v4l2_video_enc_class_init (GstV4l2VideoEncClass * klass)
       "Codec/Encoder/Video",
       "Encode video streams via V4L2 API", "ayaka <ayaka@soulik.info>");
 
+  gst_element_class_add_pad_template (element_class,
+      gst_pad_template_new ("sink", GST_PAD_SINK, GST_PAD_ALWAYS,
+          gst_v4l2_object_get_codec_caps ()));
+  gst_element_class_add_pad_template (element_class,
+      gst_pad_template_new ("src", GST_PAD_SRC, GST_PAD_ALWAYS,
+          gst_v4l2_object_get_raw_caps ()));
+
   gobject_class->dispose = GST_DEBUG_FUNCPTR (gst_v4l2_video_enc_dispose);
   gobject_class->finalize = GST_DEBUG_FUNCPTR (gst_v4l2_video_enc_finalize);
   gobject_class->set_property =
diff --git a/sys/v4l2/v4l2-utils.c b/sys/v4l2/v4l2-utils.c
index da6e536e45bc..c0c509ed1f58 100644
--- a/sys/v4l2/v4l2-utils.c
+++ b/sys/v4l2/v4l2-utils.c
@@ -225,27 +225,21 @@ gst_v4l2_encoder_subinstance_init (GTypeInstance * instance, gpointer g_class)
 {
   GstV4l2VideoEnc *self = GST_V4L2_VIDEO_ENC (instance);
 
-  self->v4l2output =
-      gst_v4l2_object_new (GST_ELEMENT (self),
-      V4L2_BUF_TYPE_VIDEO_OUTPUT,
-      GST_V4L2_VIDEO_ENC_CLASS (g_class)->default_device, gst_v4l2_get_output,
-      gst_v4l2_set_output, NULL);
-  self->v4l2output->no_initial_format = TRUE;
-  self->v4l2output->keep_aspect = FALSE;
-
-  self->v4l2capture =
-      gst_v4l2_object_new (GST_ELEMENT (self),
-      V4L2_BUF_TYPE_VIDEO_CAPTURE,
-      GST_V4L2_VIDEO_ENC_CLASS (g_class)->default_device, gst_v4l2_get_input,
-      gst_v4l2_set_input, NULL);
-  self->v4l2capture->no_initial_format = TRUE;
-  self->v4l2capture->keep_aspect = FALSE;
+  g_free (self->v4l2output->videodev);
+  self->v4l2output->videodev =
+      g_strdup (GST_V4L2_VIDEO_ENC_CLASS (g_class)->default_device);
+
+  g_free (self->v4l2capture->videodev);
+  self->v4l2capture->videodev =
+      g_strdup (GST_V4L2_VIDEO_ENC_CLASS (g_class)->default_device);
 }
 
 static void
 gst_v4l2_encoder_subclass_init (gpointer g_class, gpointer data)
 {
   GstElementClass *element_class = GST_ELEMENT_CLASS (g_class);
+  GObjectClass *gobject_class =
+      (GObjectClass *) GST_V4L2_VIDEO_ENC_CLASS (g_class);
   GstV4l2VideoCData *cdata = data;
 
   GST_V4L2_VIDEO_ENC_CLASS (g_class)->default_device = cdata->device;
@@ -258,6 +252,12 @@ gst_v4l2_encoder_subclass_init (gpointer g_class, gpointer data)
       gst_pad_template_new ("src",
           GST_PAD_SRC, GST_PAD_ALWAYS, cdata->src_caps));
 
+  gobject_class->get_property =
+      GST_DEBUG_FUNCPTR (gst_v4l2_subclass_get_property);
+
+  gst_v4l2_object_install_m2m_subclass_properties_helper ((GObjectClass *)
+      GST_V4L2_VIDEO_ENC_CLASS (g_class));
+
   g_free (cdata);
 }
 
@@ -266,21 +266,13 @@ gst_v4l2_decoder_subinstance_init (GTypeInstance * instance, gpointer g_class)
 {
   GstV4l2VideoDec *self = GST_V4L2_VIDEO_DEC (instance);
 
-  self->v4l2output =
-      gst_v4l2_object_new (GST_ELEMENT (self),
-      V4L2_BUF_TYPE_VIDEO_OUTPUT,
-      GST_V4L2_VIDEO_DEC_CLASS (g_class)->default_device, gst_v4l2_get_output,
-      gst_v4l2_set_output, NULL);
-  self->v4l2output->no_initial_format = TRUE;
-  self->v4l2output->keep_aspect = FALSE;
-
-  self->v4l2capture =
-      gst_v4l2_object_new (GST_ELEMENT (self),
-      V4L2_BUF_TYPE_VIDEO_CAPTURE,
-      GST_V4L2_VIDEO_DEC_CLASS (g_class)->default_device, gst_v4l2_get_input,
-      gst_v4l2_set_input, NULL);
-  self->v4l2capture->no_initial_format = TRUE;
-  self->v4l2capture->keep_aspect = FALSE;
+  g_free (self->v4l2output->videodev);
+  self->v4l2output->videodev =
+      g_strdup (GST_V4L2_VIDEO_DEC_CLASS (g_class)->default_device);
+
+  g_free (self->v4l2capture->videodev);
+  self->v4l2capture->videodev =
+      g_strdup (GST_V4L2_VIDEO_DEC_CLASS (g_class)->default_device);
 }
 
 
@@ -288,6 +280,8 @@ static void
 gst_v4l2_decoder_subclass_init (gpointer g_class, gpointer data)
 {
   GstElementClass *element_class = GST_ELEMENT_CLASS (g_class);
+  GObjectClass *gobject_class =
+      (GObjectClass *) GST_V4L2_VIDEO_ENC_CLASS (g_class);
   GstV4l2VideoCData *cdata = data;
 
   GST_V4L2_VIDEO_DEC_CLASS (g_class)->default_device = cdata->device;
@@ -300,6 +294,12 @@ gst_v4l2_decoder_subclass_init (gpointer g_class, gpointer data)
       gst_pad_template_new ("src",
           GST_PAD_SRC, GST_PAD_ALWAYS, cdata->src_caps));
 
+  gobject_class->get_property =
+      GST_DEBUG_FUNCPTR (gst_v4l2_subclass_get_property);
+
+  gst_v4l2_object_install_m2m_subclass_properties_helper ((GObjectClass *)
+      GST_V4L2_VIDEO_DEC_CLASS (g_class));
+
   g_free (cdata);
 }
 
