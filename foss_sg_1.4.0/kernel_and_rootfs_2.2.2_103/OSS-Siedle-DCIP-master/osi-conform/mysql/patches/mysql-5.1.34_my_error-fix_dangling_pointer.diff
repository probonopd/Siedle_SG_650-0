Backport "Bug#42675: Dangling pointer leads to a client crash (mysys/my_error.c)"
from http://lists.mysql.com/commits/69485 with minimal adaption.
See also http://bugs.mysql.com/bug.php?id=42675 for further information.

Change against original patch: replace uchar cast in "my_free((uchar*) cursor"
with cast to gptr, like in the rest of the present code.
gptr is typedef'ed to char * in include/mysql.h and ends up in free(), while
my_err_head is an ordinary struct. So this is legit and mostly cosmetics.

Original commit comment:
 2841 Chad MILLER	2009-03-17
      Bug#42675: Dangling pointer leads to a client crash (mysys/my_error.c \
        patch enclosed)
      
      One call to my_error_unregister_all() would free pointers, but leave one
      pointer to just-freed memory still assigned.  That's the bug.  Subsequent
      calls of this function would try to follow pointers into deallocated, 
      garbage memory and almost certainly SEGV.
      
      Now, after freeing a linked list, unset the initial pointer.

---
 mysys/my_error.c |   13 +++++++++----
 1 file changed, 9 insertions(+), 4 deletions(-)

Index: b/mysys/my_error.c
===================================================================
--- a/mysys/my_error.c
+++ b/mysys/my_error.c
@@ -256,11 +256,16 @@
 
 void my_error_unregister_all(void)
 {
-  struct my_err_head    *list, *next;
-  for (list= my_errmsgs_globerrs.meh_next; list; list= next)
+  struct my_err_head *cursor, *saved_next;
+
+  for (cursor= my_errmsgs_globerrs.meh_next; cursor != NULL; cursor= saved_next)
   {
-    next= list->meh_next;
-    my_free((gptr) list, MYF(0));
+    /* We need this ptr, but we're about to free its container, so save it. */
+    saved_next= cursor->meh_next;
+
+    my_free((gptr) cursor, MYF(0));
   }
+  my_errmsgs_globerrs.meh_next= NULL;  /* Freed in first iteration above. */
+
   my_errmsgs_list= &my_errmsgs_globerrs;
 }
